apiVersion: v1
kind: Pod
metadata:
  name: debug-pod
  labels:
    app: debug
    app.kubernetes.io/part-of: avakart
spec:
  containers:
  - name: debug-tools
    image: ubuntu:latest
    command: ["sleep", "infinity"]
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
    volumeMounts:
    - name: shared-data
      mountPath: /data
    securityContext:
      runAsNonRoot: false  # Debug container may need root access
      allowPrivilegeEscalation: true
  volumes:
  - name: shared-data
    emptyDir: {}
---
# Example of how to create a debug container for an existing pod
# This is for reference only and not meant to be applied directly
apiVersion: v1
kind: Pod
metadata:
  name: books-service-debug
  labels:
    app: books-service
    app.kubernetes.io/part-of: avakart
    debug: "true"
  annotations:
    debug.cloud.google.com/config: |
      {
        "debugger": "delve",
        "agent": {
          "image": "gcr.io/gcp-dev-tools/duct-tape/delve:latest",
          "command": ["/bin/sh"],
          "args": ["-c", "dlv attach $(pgrep books-service) --listen=:4000 --headless --api-version=2 --log"]
        }
      }
spec:
  shareProcessNamespace: true  # Required for debug container to see other processes
  containers:
  - name: books-service
    image: books-service:latest
    # ... other configuration same as regular books-service
  - name: debug-sidecar
    image: busybox:latest
    command: ["sleep", "infinity"]
    # This container would be replaced by the debug container at runtime
---
# Example of how to use kubectl debug command
# kubectl debug -it books-pod --image=busybox --target=books-service
# kubectl debug books-pod -it --image=ubuntu --share-processes --copy-to=books-debug-pod
