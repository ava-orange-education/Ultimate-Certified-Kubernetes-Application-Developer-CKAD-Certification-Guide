apiVersion: apps/v1
kind: Deployment
metadata:
  name: books-service
  labels:
    app: books-service
    app.kubernetes.io/part-of: avakart
spec:
  replicas: 2
  selector:
    matchLabels:
      app: books-service
  template:
    metadata:
      labels:
        app: books-service
        app.kubernetes.io/part-of: avakart
    spec:
      serviceAccountName: books-service-account
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
      initContainers:
      - name: service-check
        image: busybox:latest
        command: ['sh', '-c', 'until wget -q -O- http://storage-service:8083/health; do echo waiting for storage service; sleep 2; done;']
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop: ["ALL"]
      containers:
      - name: books-service
        image: books-service:latest
        ports:
        - containerPort: 8081
        env:
        - name: PORT
          value: "8081"
        - name: STORAGE_SERVICE_URL
          value: "http://storage-service:8083"
        - name: ORDER_PROCESSOR_URL
          value: "http://order-processor:8082"
        # ConfigMap values as environment variables
        - name: PAGE_SIZE
          valueFrom:
            configMapKeyRef:
              name: books-service-config
              key: PAGE_SIZE
        - name: ENABLE_CACHE
          valueFrom:
            configMapKeyRef:
              name: books-service-config
              key: ENABLE_CACHE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: books-service-config
              key: LOG_LEVEL
        - name: API_VERSION
          valueFrom:
            configMapKeyRef:
              name: books-service-config
              key: API_VERSION
        - name: LOG_FORMAT
          value: "json"
        # Secret values as environment variables
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: books-db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: books-db-credentials
              key: password
        volumeMounts:
        - name: shared-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      - name: log-collector
        image: log-collector:v1
        volumeMounts:
        - name: shared-logs
          mountPath: /var/log/app
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        command: ["/bin/sh", "-c"]
        args:
        - |
          tail -f /var/log/app/*.log | jq '.' || true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      volumes:
      - name: shared-logs
        emptyDir: {}
